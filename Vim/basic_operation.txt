# comments ...


}}}

foreach my $foo ( @bar ) {

    # 做點事情

   my @outs = grep /pattern/ , @list;

}

sub func1 {


}

假設現在 cursur 在 grep 的 patern, 然後 Vim 的模式是 Normal mode:
    首先要強調一件事, Normal mode 強調的是 motion, 還有 commit(?)
    要看 Normal mode 有什麼指令可以用, 請在 Normal mode 打 :h motion.txt
    

1. 按 [h|j|k|l], 游標會往左|下|上|右移動

2. 按 [f|F]+你要找的字元,游標會移動到游標之後|之前的你要找的字元
	ex: 按 f@, 游標會移到 @list 的 @

3. 按 [^|$], 游標會跳到游標那行的行首/行尾

4. 按 [{, 游標會跳到離游標最近的 {

5. 按 [H/M/L], 游標會跳到畫面最上方/中間那行/最下方

6. 按 C, 游標之後(包括游標目前指向的字元)到行尾的字串都會被刪除, 然後進入 Insert mode

假設現在游標在 @bar 後面的 { 上:

7. 按 ％, 游標會跳到游標之後最近的 } 上
    如果游標是在 } 上, 按 % 則會跳進游標之前最近的 { 上
    如果 }|{ 沒有對應的 {|}, 游標就不會移動 



fiiiijerwgiwjergiej


假設現在想要從 Normal mode 跳到 Insert mode:

1. 按 i 後再打字, 字會打在游標之前; 按 I 的話游標會直接跳到目前游標那行的第一個非空白字元,字一樣會打在游標之前

2. 按 a 後再打字, 游標會往後移動一個字元, 然後字一樣打在游標之前(也就是字會打在按 a 之前游標指向的那個字之後)

3. 按 A 後再打字,字會打在目前游標那行的行尾之後







假設現在想要從 Normal mode 跳到 Visual mode:
    Visual mode 的用意是可以選擇一個文字區塊, 然後對這個文字區塊做一些操作
    這個操作可以非常複雜, shell script 等級

1. 按 v, 以字元為單位做選擇

2. 按 V, 以行為單位做選擇

3. 按 ctrl+v, 可以選取一個矩形區塊

(上面三個用文字難敘述, 自己選選看吧)

3. 按 ctrl+v, 可以選取一個矩形區塊

(上面三個用文字難敘述, 自己選選看吧)

3. 按 ctrl+v, 可以選取一個矩形區塊

(上面三個用文字難敘述, 自己選選看吧)

選好一個區塊之後, 可以再加一些按鍵來做操作:
   選了區塊再加一個按鍵之後, 會做完指定的動作, 然後回到 Normal mode

4. 按 y, 會將目前選擇的文字區塊複製, 然後回到 Normal mode

5. 按 d, 會將目前選擇的文字區塊刪除, 然後回到 Normal mode

6. 在 Normal mode 單純按 [p|P] 可以將複製的文字貼到原本游標之後/之前













	
